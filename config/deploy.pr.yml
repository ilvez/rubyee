service: rubyee
image: apps/rubyee

servers:
  web:
    hosts: 
      - <%= ENV.fetch('SERVER') %>
    options:
      network: user
    labels:
      # http
      traefik.http.routers.rubyee-web.entrypoints: http
      traefik.http.routers.rubyee-web.rule: "HostRegexp(`(www\\.)?(ruby|rubyonrails)\\.ee`)"
      traefik.http.routers.rubyee-web.middlewares: redirect-www-to-root

      # https
      traefik.http.routers.rubyee-secure.entrypoints: https
      traefik.http.routers.rubyee-secure.rule: Host(`ruby.ee`) || Host(`www.ruby.ee`)
      traefik.http.routers.rubyee-secure.tls: true
      traefik.http.routers.rubyee-secure.tls.certresolver: letsencrypt
      traefik.http.routers.rubyee-secure.middlewares: redirect-www-to-root

      # redirects to ruby.ee
      traefik.http.routers.rubyee-secure2.entrypoints: https
      traefik.http.routers.rubyee-secure2.rule: Host(`rubyonrails.ee`) || Host(`www.rubyonrails.ee`)
      traefik.http.routers.rubyee-secure2.tls: true
      traefik.http.routers.rubyee-secure2.tls.certresolver: letsencrypt
      traefik.http.middlewares.redirect-to-rubyee.redirectregex.regex: '^https?://(www.)?rubyonrails.ee(.*)'
      traefik.http.middlewares.redirect-to-rubyee.redirectregex.replacement: 'https://ruby.ee$2' # don use ${1} here!
      traefik.http.middlewares.redirect-to-rubyee.redirectregex.permanent: "true"
      traefik.http.routers.rubyee-secure2.middlewares: redirect-to-rubyee

registry:
  server: <%= ENV.fetch('REGISTRY_HOST') %> 
  username: <%= ENV.fetch('REGISTRY_USER') %>
  password: <%= ENV.fetch('REGISTRY_PASSWORD') %>

# Use a different ssh user than root
ssh:
  user: <%= ENV.fetch('SSH_USER') %> 

# Configure builder setup.
builder:
  multiarch: false
